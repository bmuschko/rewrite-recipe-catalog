package com.yourorg.security;

import lombok.EqualsAndHashCode;
import lombok.Value;
import org.jspecify.annotations.Nullable;
import org.openrewrite.ExecutionContext;
import org.openrewrite.Option;
import org.openrewrite.ResourceUtils;
import org.openrewrite.java.dependencies.DependencyVulnerabilityCheckBase;
import org.openrewrite.java.dependencies.Vulnerability;

import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Value
@EqualsAndHashCode(callSuper = false)
public class OverriddenBaselineDependencyVulnerabilityCheck extends DependencyVulnerabilityCheckBase {
    private final static Vulnerability COMMONS_LANG_VULNERABILITY = createCommonsLangVulnerability();

    private static Vulnerability createCommonsLangVulnerability() {
        return new Vulnerability("CVE-9999-123", ZonedDateTime.now(), "Fake Commons Lang Vulnerability", "commons-lang:commons-lang", "2.5", "2.6", null, Vulnerability.Severity.HIGH, "CWE-9999");
    }

    @Override
    public String getDisplayName() {
        return "Custom check for vulnerable dependencies";
    }

    @Override
    public String getDescription() {
        //language=markdown
        return "Supplements custom vulnerability checks for dependencies.";
    }

    @Option(displayName = "Scope",
            //language=markdown
            description = "Match dependencies with the specified scope. Default is `runtime`. " +
                    "An explanation of what each scope means can be found in the [Apache Maven documentation](https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Scope).",
            valid = {"compile", "test", "runtime", "provided"},
            example = "runtime",
            required = false)
    @Nullable
    String scope;

    @Option(displayName = "Override transitives",
            description = "When enabled transitive dependencies with vulnerabilities will have their versions overridden. " +
                    "By default only direct dependencies have their version numbers upgraded.",
            example = "false",
            required = false)
    @Nullable Boolean overrideTransitive;

    @Option(displayName = "Maximum upgrade delta",
            //language=markdown
            description = "The maximum difference to allow when suggesting a dependency version upgrade. " +
                    "Patch version upgrades are the default and safest option, as patch releases assert full backwards compatibility with no breaking changes. " +
                    "Minor version upgrades can introduce new features but do not _typically_ include breaking changes. " +
                    "Major version upgrades will typically require code changes above and beyond this recipe. ",
            valid = {"patch", "minor", "major"},
            example = "patch",
            required = false)
    @Nullable UpgradeDelta maximumUpgradeDelta;

    @Override
    public String getInstanceNameSuffix() {
        return "Last updated: " + ResourceUtils.getResourceAsString("last_updated") + ".";
    }

    @Override
    public List<Vulnerability> baselineVulnerabilities(ExecutionContext ctx) {
        List<Vulnerability> vulnerabilities = new ArrayList<>();
        vulnerabilities.add(COMMONS_LANG_VULNERABILITY);
        return vulnerabilities;
    }

    @Override
    public List<Vulnerability> supplementalVulnerabilities(ExecutionContext ctx) {
        return Collections.emptyList();
    }
}